$date
   Wed May 29 23:14:20 2024
$end
$version
  2023.1
$end
$timescale
  1ps
$end
$scope module Board $end
$scope module cpu_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # IR [31:0] $end
$var wire 1 $ write_pc $end
$var wire 1 % write_ir $end
$var wire 1 & write_reg $end
$var reg 32 ' A [31:0] $end
$var reg 32 ( B [31:0] $end
$var reg 32 ) C [31:0] $end
$var reg 32 * F [31:0] $end
$var wire 32 + PC [31:0] $end
$var reg 4 , NZCV [3:0] $end
$var wire 1 - rm_imm_s_ctrl $end
$var wire 2 . rs_imm_s_ctrl [1:0] $end
$var wire 4 / ALU_OP_ctrl [3:0] $end
$var wire 3 0 Shift_OP_ctrl [2:0] $end
$var wire 32 1 Shift_out [31:0] $end
$var wire 32 2 W_data [31:0] $end
$var wire 4 3 registers_write_addr [3:0] $end
$var wire 2 4 pc_s [1:0] $end
$var wire 1 5 rd_s $end
$var wire 1 6 ALU_A_s $end
$var wire 1 7 ALU_B_s $end
$var wire 32 8 Shift_Data [31:0] $end
$var wire 8 9 Shift_Num [7:0] $end
$var wire 1 : Shift_carry_out $end
$var wire 32 ; Fout [31:0] $end
$var wire 4 < NZCVout [3:0] $end
$var wire 1 = S_ctrl $end
$var wire 1 > W_IR_valid $end
$var wire 5 ? imm5 [4:0] $end
$var wire 12 @ imm12 [11:0] $end
$var wire 24 A imm24 [23:0] $end
$var wire 1 B Und_Ins $end
$var wire 4 C rd [3:0] $end
$var wire 4 D rn [3:0] $end
$var wire 4 E rm [3:0] $end
$var wire 4 F rs [3:0] $end
$var wire 1 G LA $end
$var wire 1 H LB $end
$var wire 1 I LC $end
$var wire 1 J LF $end
$var wire 32 K r_data_a [31:0] $end
$var wire 32 L r_data_b [31:0] $end
$var wire 32 M r_data_c [31:0] $end
$var reg 5 N M [4:0] $end
$var wire 32 O pc_data [31:0] $end
$var wire 32 P IR_buf [31:0] $end
$var wire 8 Q gen1 [7:0] $end
$var wire 32 R Ainput [31:0] $end
$var wire 32 S Binput [31:0] $end
$scope module fetch_instruction_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 % write_ir $end
$var wire 1 $ write_pc $end
$var wire 2 4 pc_s [1:0] $end
$var wire 32 * pc_f_out [31:0] $end
$var wire 32 ( pc_b_out [31:0] $end
$var wire 4 , NZCV [3:0] $end
$var reg 32 T PC [31:0] $end
$var reg 32 U IR [31:0] $end
$var wire 32 P IR_buf [31:0] $end
$var wire 1 > W_IR_valid $end
$var reg 1 V cond $end
$scope module ROM1 $end
$var wire 1 ! clka $end
$var wire 6 W addra [7:2] $end
$var wire 32 P douta [31:0] $end
$scope module inst $end
$var wire 1 ! clka $end
$var wire 1 X rsta $end
$var wire 1 Y ena $end
$var wire 1 Z regcea $end
$var wire 1 [ wea [0:0] $end
$var wire 6 W addra [7:2] $end
$var wire 32 \ dina [31:0] $end
$var wire 32 P douta [31:0] $end
$var wire 1 ] clkb $end
$var wire 1 ^ rstb $end
$var wire 1 _ enb $end
$var wire 1 ` regceb $end
$var wire 1 a web [0:0] $end
$var wire 6 b addrb [5:0] $end
$var wire 32 c dinb [31:0] $end
$var wire 32 d doutb [31:0] $end
$var wire 1 e injectsbiterr $end
$var wire 1 f injectdbiterr $end
$var wire 1 g sbiterr $end
$var wire 1 h dbiterr $end
$var wire 6 i rdaddrecc [5:0] $end
$var wire 1 j eccpipece $end
$var wire 1 k sleep $end
$var wire 1 l deepsleep $end
$var wire 1 m shutdown $end
$var wire 1 n rsta_busy $end
$var wire 1 o rstb_busy $end
$var wire 1 p s_aclk $end
$var wire 1 q s_aresetn $end
$var wire 4 r s_axi_awid [3:0] $end
$var wire 32 s s_axi_awaddr [31:0] $end
$var wire 8 t s_axi_awlen [7:0] $end
$var wire 3 u s_axi_awsize [2:0] $end
$var wire 2 v s_axi_awburst [1:0] $end
$var wire 1 w s_axi_awvalid $end
$var wire 1 x s_axi_awready $end
$var wire 32 y s_axi_wdata [31:0] $end
$var wire 1 z s_axi_wstrb [0:0] $end
$var wire 1 { s_axi_wlast $end
$var wire 1 | s_axi_wvalid $end
$var wire 1 } s_axi_wready $end
$var wire 4 ~ s_axi_bid [3:0] $end
$var wire 2 !! s_axi_bresp [1:0] $end
$var wire 1 "! s_axi_bvalid $end
$var wire 1 #! s_axi_bready $end
$var wire 4 $! s_axi_arid [3:0] $end
$var wire 32 %! s_axi_araddr [31:0] $end
$var wire 8 &! s_axi_arlen [7:0] $end
$var wire 3 '! s_axi_arsize [2:0] $end
$var wire 2 (! s_axi_arburst [1:0] $end
$var wire 1 )! s_axi_arvalid $end
$var wire 1 *! s_axi_arready $end
$var wire 4 +! s_axi_rid [3:0] $end
$var wire 32 ,! s_axi_rdata [31:0] $end
$var wire 2 -! s_axi_rresp [1:0] $end
$var wire 1 .! s_axi_rlast $end
$var wire 1 /! s_axi_rvalid $end
$var wire 1 0! s_axi_rready $end
$var wire 1 1! s_axi_injectsbiterr $end
$var wire 1 2! s_axi_injectdbiterr $end
$var wire 1 3! s_axi_sbiterr $end
$var wire 1 4! s_axi_dbiterr $end
$var wire 6 5! s_axi_rdaddrecc [5:0] $end
$var wire 1 6! SBITERR $end
$var wire 1 7! DBITERR $end
$var wire 1 8! S_AXI_AWREADY $end
$var wire 1 9! S_AXI_WREADY $end
$var wire 1 :! S_AXI_BVALID $end
$var wire 1 ;! S_AXI_ARREADY $end
$var wire 1 <! S_AXI_RLAST $end
$var wire 1 =! S_AXI_RVALID $end
$var wire 1 >! S_AXI_SBITERR $end
$var wire 1 ?! S_AXI_DBITERR $end
$var wire 1 @! WEA [0:0] $end
$var wire 6 A! ADDRA [5:0] $end
$var wire 32 B! DINA [31:0] $end
$var wire 32 C! DOUTA [31:0] $end
$var wire 1 D! WEB [0:0] $end
$var wire 6 E! ADDRB [5:0] $end
$var wire 32 F! DINB [31:0] $end
$var wire 32 G! DOUTB [31:0] $end
$var wire 6 H! RDADDRECC [5:0] $end
$var wire 4 I! S_AXI_AWID [3:0] $end
$var wire 32 J! S_AXI_AWADDR [31:0] $end
$var wire 8 K! S_AXI_AWLEN [7:0] $end
$var wire 3 L! S_AXI_AWSIZE [2:0] $end
$var wire 2 M! S_AXI_AWBURST [1:0] $end
$var wire 32 N! S_AXI_WDATA [31:0] $end
$var wire 1 O! S_AXI_WSTRB [0:0] $end
$var wire 4 P! S_AXI_BID [3:0] $end
$var wire 2 Q! S_AXI_BRESP [1:0] $end
$var wire 4 R! S_AXI_ARID [3:0] $end
$var wire 32 S! S_AXI_ARADDR [31:0] $end
$var wire 8 T! S_AXI_ARLEN [7:0] $end
$var wire 3 U! S_AXI_ARSIZE [2:0] $end
$var wire 2 V! S_AXI_ARBURST [1:0] $end
$var wire 4 W! S_AXI_RID [3:0] $end
$var wire 32 X! S_AXI_RDATA [31:0] $end
$var wire 2 Y! S_AXI_RRESP [1:0] $end
$var wire 6 Z! S_AXI_RDADDRECC [5:0] $end
$var wire 1 [! WEB_parameterized [0:0] $end
$var wire 1 \! ECCPIPECE $end
$var wire 1 ]! SLEEP $end
$var reg 1 ^! RSTA_BUSY $end
$var reg 1 _! RSTB_BUSY $end
$var wire 1 `! CLKA $end
$var wire 1 a! RSTA $end
$var wire 1 b! ENA $end
$var wire 1 c! REGCEA $end
$var wire 1 d! CLKB $end
$var wire 1 e! RSTB $end
$var wire 1 f! ENB $end
$var wire 1 g! REGCEB $end
$var wire 1 h! INJECTSBITERR $end
$var wire 1 i! INJECTDBITERR $end
$var wire 1 j! S_ACLK $end
$var wire 1 k! S_ARESETN $end
$var wire 1 l! S_AXI_AWVALID $end
$var wire 1 m! S_AXI_WLAST $end
$var wire 1 n! S_AXI_WVALID $end
$var wire 1 o! S_AXI_BREADY $end
$var wire 1 p! S_AXI_ARVALID $end
$var wire 1 q! S_AXI_RREADY $end
$var wire 1 r! S_AXI_INJECTSBITERR $end
$var wire 1 s! S_AXI_INJECTDBITERR $end
$var reg 1 t! injectsbiterr_in $end
$var reg 1 u! injectdbiterr_in $end
$var reg 1 v! rsta_in $end
$var reg 1 w! ena_in $end
$var reg 1 x! regcea_in $end
$var reg 1 y! wea_in [0:0] $end
$var reg 6 z! addra_in [5:0] $end
$var reg 32 {! dina_in [31:0] $end
$var wire 6 |! s_axi_awaddr_out_c [5:0] $end
$var wire 6 }! s_axi_araddr_out_c [5:0] $end
$var wire 1 ~! s_axi_wr_en_c $end
$var wire 1 !" s_axi_rd_en_c $end
$var wire 1 "" s_aresetn_a_c $end
$var wire 8 #" s_axi_arlen_c [7:0] $end
$var wire 4 $" s_axi_rid_c [3:0] $end
$var wire 32 %" s_axi_rdata_c [31:0] $end
$var wire 2 &" s_axi_rresp_c [1:0] $end
$var wire 1 '" s_axi_rlast_c $end
$var wire 1 (" s_axi_rvalid_c $end
$var wire 1 )" s_axi_rready_c $end
$var wire 1 *" regceb_c $end
$var wire 7 +" s_axi_payload_c [6:0] $end
$var wire 7 ," m_axi_payload_c [6:0] $end
$var reg 5 -" RSTA_SHFT_REG [4:0] $end
$var reg 1 ." POR_A $end
$var reg 5 /" RSTB_SHFT_REG [4:0] $end
$var reg 1 0" POR_B $end
$var reg 1 1" ENA_dly $end
$var reg 1 2" ENA_dly_D $end
$var reg 1 3" ENB_dly $end
$var reg 1 4" ENB_dly_D $end
$var wire 1 5" RSTA_I_SAFE $end
$var wire 1 6" RSTB_I_SAFE $end
$var wire 1 7" ENA_I_SAFE $end
$var wire 1 8" ENB_I_SAFE $end
$var reg 1 9" ram_rstram_a_busy $end
$var reg 1 :" ram_rstreg_a_busy $end
$var reg 1 ;" ram_rstram_b_busy $end
$var reg 1 <" ram_rstreg_b_busy $end
$var reg 1 =" ENA_dly_reg $end
$var reg 1 >" ENB_dly_reg $end
$var reg 1 ?" ENA_dly_reg_D $end
$var reg 1 @" ENB_dly_reg_D $end
$scope module native_mem_module.blk_mem_gen_v8_4_6_inst $end
$var wire 1 `! CLKA $end
$var wire 1 5" RSTA $end
$var wire 1 7" ENA $end
$var wire 1 A" REGCEA $end
$var wire 1 B" WEA [0:0] $end
$var wire 6 C" ADDRA [5:0] $end
$var wire 32 D" DINA [31:0] $end
$var wire 32 C! DOUTA [31:0] $end
$var wire 1 d! CLKB $end
$var wire 1 6" RSTB $end
$var wire 1 8" ENB $end
$var wire 1 g! REGCEB $end
$var wire 1 D! WEB [0:0] $end
$var wire 6 E! ADDRB [5:0] $end
$var wire 32 F! DINB [31:0] $end
$var wire 32 G! DOUTB [31:0] $end
$var wire 1 E" INJECTSBITERR $end
$var wire 1 F" INJECTDBITERR $end
$var wire 1 \! ECCPIPECE $end
$var wire 1 ]! SLEEP $end
$var wire 1 6! SBITERR $end
$var wire 1 7! DBITERR $end
$var wire 6 H! RDADDRECC [5:0] $end
$var reg 39 G" doublebit_error [38:0] $end
$var reg 32 H" memory_out_a [31:0] $end
$var reg 32 I" memory_out_b [31:0] $end
$var reg 1 J" sbiterr_in $end
$var wire 1 K" sbiterr_sdp $end
$var reg 1 L" dbiterr_in $end
$var wire 1 M" dbiterr_sdp $end
$var wire 32 N" dout_i [31:0] $end
$var wire 1 O" dbiterr_i $end
$var wire 1 P" sbiterr_i $end
$var wire 6 Q" rdaddrecc_i [5:0] $end
$var reg 6 R" rdaddrecc_in [5:0] $end
$var wire 6 S" rdaddrecc_sdp [5:0] $end
$var reg 32 T" inita_val [31:0] $end
$var reg 32 U" initb_val [31:0] $end
$var reg 1 V" is_collision $end
$var reg 1 W" is_collision_a $end
$var reg 1 X" is_collision_delay_a $end
$var reg 1 Y" is_collision_b $end
$var reg 1 Z" is_collision_delay_b $end
$var integer 32 [" status [31:0] $end
$var integer 32 \" initfile [31:0] $end
$var integer 32 ]" meminitfile [31:0] $end
$var reg 32 ^" mif_data [31:0] $end
$var reg 32 _" mem_data [31:0] $end
$var reg 256 `" inita_str [255:0] $end
$var reg 256 a" initb_str [255:0] $end
$var reg 256 b" default_data_str [255:0] $end
$var reg 8184 c" init_file_str [8183:0] $end
$var reg 8184 d" mem_init_file_str [8183:0] $end
$var integer 32 e" cnt [31:0] $end
$var integer 32 f" write_addr_a_width [31:0] $end
$var integer 32 g" read_addr_a_width [31:0] $end
$var integer 32 h" write_addr_b_width [31:0] $end
$var integer 32 i" read_addr_b_width [31:0] $end
$var wire 1 j" ena_i $end
$var wire 1 k" enb_i $end
$var wire 1 l" reseta_i $end
$var wire 1 m" resetb_i $end
$var wire 1 n" wea_i [0:0] $end
$var wire 1 o" web_i [0:0] $end
$var wire 1 p" rea_i $end
$var wire 1 q" reb_i $end
$var wire 1 r" rsta_outp_stage $end
$var wire 1 s" rstb_outp_stage $end
$var wire 6 t" \async_coll.addra_delay  [5:0] $end
$var wire 1 u" \async_coll.wea_delay  [0:0] $end
$var wire 1 v" \async_coll.ena_delay  $end
$var wire 6 w" \async_coll.addrb_delay  [5:0] $end
$var wire 1 x" \async_coll.web_delay  [0:0] $end
$var wire 1 y" \async_coll.enb_delay  $end
$scope module reg_a $end
$var wire 1 `! CLK $end
$var wire 1 r" RST $end
$var wire 1 7" EN $end
$var wire 1 A" REGCE $end
$var wire 32 z" DIN_I [31:0] $end
$var reg 32 {" DOUT [31:0] $end
$var wire 1 |" SBITERR_IN_I $end
$var wire 1 }" DBITERR_IN_I $end
$var reg 1 ~" SBITERR $end
$var reg 1 !# DBITERR $end
$var wire 6 "# RDADDRECC_IN_I [5:0] $end
$var wire 1 ## ECCPIPECE $end
$var reg 6 $# RDADDRECC [5:0] $end
$var reg 32 %# out_regs [31:0] $end
$var reg 6 &# rdaddrecc_regs [5:0] $end
$var reg 1 '# sbiterr_regs [0:0] $end
$var reg 1 (# dbiterr_regs [0:0] $end
$var reg 256 )# init_str [255:0] $end
$var reg 32 *# init_val [31:0] $end
$var wire 1 +# en_i $end
$var wire 1 ,# regce_i $end
$var wire 1 -# rst_i $end
$var reg 32 .# DIN [31:0] $end
$var reg 6 /# RDADDRECC_IN [5:0] $end
$var reg 1 0# SBITERR_IN $end
$var reg 1 1# DBITERR_IN $end
$upscope $end
$scope module reg_b $end
$var wire 1 d! CLK $end
$var wire 1 s" RST $end
$var wire 1 8" EN $end
$var wire 1 g! REGCE $end
$var wire 32 2# DIN_I [31:0] $end
$var reg 32 3# DOUT [31:0] $end
$var wire 1 4# SBITERR_IN_I $end
$var wire 1 5# DBITERR_IN_I $end
$var reg 1 6# SBITERR $end
$var reg 1 7# DBITERR $end
$var wire 6 8# RDADDRECC_IN_I [5:0] $end
$var wire 1 \! ECCPIPECE $end
$var reg 6 9# RDADDRECC [5:0] $end
$var reg 32 :# out_regs [31:0] $end
$var reg 6 ;# rdaddrecc_regs [5:0] $end
$var reg 1 <# sbiterr_regs [0:0] $end
$var reg 1 =# dbiterr_regs [0:0] $end
$var reg 256 ># init_str [255:0] $end
$var reg 32 ?# init_val [31:0] $end
$var wire 1 @# en_i $end
$var wire 1 A# regce_i $end
$var wire 1 B# rst_i $end
$var reg 32 C# DIN [31:0] $end
$var reg 6 D# RDADDRECC_IN [5:0] $end
$var reg 1 E# SBITERR_IN $end
$var reg 1 F# DBITERR_IN $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 d! CLK $end
$var wire 32 N" DIN [31:0] $end
$var reg 32 G# DOUT [31:0] $end
$var wire 1 P" SBITERR_IN $end
$var wire 1 O" DBITERR_IN $end
$var reg 1 H# SBITERR $end
$var reg 1 I# DBITERR $end
$var wire 6 Q" RDADDRECC_IN [5:0] $end
$var reg 6 J# RDADDRECC [5:0] $end
$var reg 32 K# dout_i [31:0] $end
$var reg 1 L# sbiterr_i $end
$var reg 1 M# dbiterr_i $end
$var reg 6 N# rdaddrecc_i [5:0] $end
$upscope $end
$scope task write_a $end
$var reg 6 O# addr [5:0] $end
$var reg 1 P# byte_en [0:0] $end
$var reg 32 Q# data [31:0] $end
$var reg 1 R# inj_sbiterr $end
$var reg 1 S# inj_dbiterr $end
$var reg 32 T# current_contents [31:0] $end
$var reg 6 U# address [5:0] $end
$var integer 32 V# i [31:0] $end
$upscope $end
$scope task write_b $end
$var reg 6 W# addr [5:0] $end
$var reg 1 X# byte_en [0:0] $end
$var reg 32 Y# data [31:0] $end
$var reg 32 Z# current_contents [31:0] $end
$var reg 6 [# address [5:0] $end
$var integer 32 \# i [31:0] $end
$upscope $end
$scope task read_a $end
$var reg 6 ]# addr [5:0] $end
$var reg 1 ^# reset $end
$var reg 6 _# address [5:0] $end
$var integer 32 `# i [31:0] $end
$upscope $end
$scope task read_b $end
$var reg 6 a# addr [5:0] $end
$var reg 1 b# reset $end
$var reg 6 c# address [5:0] $end
$var integer 32 d# i [31:0] $end
$upscope $end
$scope task init_memory $end
$var integer 32 e# i [31:0] $end
$var integer 32 f# j [31:0] $end
$var integer 32 g# addr_step [31:0] $end
$var integer 32 h# status [31:0] $end
$var reg 32 i# default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 j# log2roundup [31:0] $end
$var integer 32 k# data_value [31:0] $end
$var integer 32 l# width [31:0] $end
$var integer 32 m# cnt [31:0] $end
$upscope $end
$scope function collision_check $end
$var integer 32 n# collision_check [31:0] $end
$var reg 6 o# addr_a [5:0] $end
$var integer 32 p# iswrite_a [31:0] $end
$var reg 6 q# addr_b [5:0] $end
$var integer 32 r# iswrite_b [31:0] $end
$var reg 1 s# c_aw_bw $end
$var reg 1 t# c_aw_br $end
$var reg 1 u# c_ar_bw $end
$var integer 32 v# scaled_addra_to_waddrb_width [31:0] $end
$var integer 32 w# scaled_addrb_to_waddrb_width [31:0] $end
$var integer 32 x# scaled_addra_to_waddra_width [31:0] $end
$var integer 32 y# scaled_addrb_to_waddra_width [31:0] $end
$var integer 32 z# scaled_addra_to_raddrb_width [31:0] $end
$var integer 32 {# scaled_addrb_to_raddrb_width [31:0] $end
$var integer 32 |# scaled_addra_to_raddra_width [31:0] $end
$var integer 32 }# scaled_addrb_to_raddra_width [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module controller_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # I [31:0] $end
$var wire 32 P IR_buf [31:0] $end
$var wire 1 > W_IR_valid $end
$var wire 4 C rd [3:0] $end
$var wire 4 D rn [3:0] $end
$var wire 4 E rm [3:0] $end
$var wire 4 F rs [3:0] $end
$var wire 1 B Und_Ins $end
$var wire 5 ? imm5 [4:0] $end
$var wire 12 @ imm12 [11:0] $end
$var wire 24 A imm24 [23:0] $end
$var wire 1 $ write_pc $end
$var wire 1 % write_ir $end
$var wire 1 & write_reg $end
$var wire 1 G LA $end
$var wire 1 H LB $end
$var wire 1 I LC $end
$var wire 1 J LF $end
$var wire 2 4 pc_s [1:0] $end
$var wire 1 6 ALU_A_s $end
$var wire 1 7 ALU_B_s $end
$var wire 1 5 rd_s $end
$var wire 1 = S_ctrl $end
$var wire 1 - rm_imm_s_ctrl $end
$var wire 2 . rs_imm_s_ctrl [1:0] $end
$var wire 3 0 Shift_OP_ctrl [2:0] $end
$var wire 4 / ALU_OP_ctrl [3:0] $end
$var wire 2 ~# rs_imm_s [1:0] $end
$var wire 3 !$ SHIFT_OP [2:0] $end
$var wire 4 "$ ALU_OP [3:0] $end
$var wire 1 #$ S $end
$var wire 1 $$ rm_imm_s $end
$var wire 1 %$ TTCC $end
$scope module translation_inst $end
$var wire 32 # I [31:0] $end
$var wire 1 " rst $end
$var wire 4 C rd [3:0] $end
$var wire 4 D rn [3:0] $end
$var wire 4 E rm [3:0] $end
$var wire 4 F rs [3:0] $end
$var reg 1 &$ Und_Ins $end
$var wire 1 $$ rm_imm_s $end
$var wire 2 ~# rs_imm_s [1:0] $end
$var wire 3 !$ SHIFT_OP [2:0] $end
$var reg 4 '$ ALU_OP [3:0] $end
$var wire 1 #$ S $end
$var wire 1 %$ TTCC $end
$var wire 5 ? imm5 [4:0] $end
$var wire 12 @ imm12 [11:0] $end
$var wire 24 A imm24 [23:0] $end
$var wire 4 ($ cond [3:0] $end
$var wire 4 )$ OP [3:0] $end
$var wire 3 *$ OP1 [2:0] $end
$var wire 2 +$ v_type [1:0] $end
$var wire 3 ,$ DPx [2:0] $end
$var wire 1 -$ isf $end
$upscope $end
$scope module FSM_inst $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # IR [31:0] $end
$var wire 32 P IR_buf [31:0] $end
$var wire 1 > W_IR_valid $end
$var wire 1 $$ rm_imm_s $end
$var wire 2 ~# rs_imm_s [1:0] $end
$var wire 3 !$ SHIFT_OP [2:0] $end
$var wire 4 "$ ALU_OP [3:0] $end
$var wire 1 #$ S $end
$var wire 1 %$ TTCC $end
$var reg 1 .$ write_pc $end
$var reg 1 /$ write_ir $end
$var reg 1 0$ write_reg $end
$var reg 1 1$ LA $end
$var reg 1 2$ LB $end
$var reg 1 3$ LC $end
$var reg 1 4$ LF $end
$var reg 2 5$ pc_s [1:0] $end
$var reg 1 6$ ALU_A_s $end
$var reg 1 7$ ALU_B_s $end
$var reg 1 8$ rd_s $end
$var reg 1 9$ S_ctrl $end
$var reg 1 :$ rm_imm_s_ctrl $end
$var reg 2 ;$ rs_imm_s_ctrl [1:0] $end
$var reg 3 <$ Shift_OP_ctrl [2:0] $end
$var reg 4 =$ ALU_OP_ctrl [3:0] $end
$var reg 6 >$ ST [5:0] $end
$var reg 6 ?$ Next_ST [5:0] $end
$var wire 1 @$ isB $end
$var wire 1 A$ isBL $end
$var wire 1 B$ isBX $end
$upscope $end
$upscope $end
$scope module registers_inst $end
$var wire 4 D r_addr_a [3:0] $end
$var wire 4 E r_addr_b [3:0] $end
$var wire 4 F r_addr_c [3:0] $end
$var wire 4 3 w_addr [3:0] $end
$var wire 32 * w_data [31:0] $end
$var wire 1 & write_reg $end
$var wire 1 $ write_pc $end
$var wire 32 O pc_data [31:0] $end
$var wire 5 C$ M [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 D$ r_data_a [31:0] $end
$var reg 32 E$ r_data_b [31:0] $end
$var reg 32 F$ r_data_c [31:0] $end
$var reg 1 G$ error_w $end
$var reg 1 H$ error_r $end
$var reg 32 I$ r13_irq [31:0] $end
$var reg 32 J$ r13_svc [31:0] $end
$var reg 32 K$ r13_mon [31:0] $end
$var reg 32 L$ r13_abt [31:0] $end
$var reg 32 M$ r13_hyp [31:0] $end
$var reg 32 N$ r13_und [31:0] $end
$var reg 32 O$ r14_irq [31:0] $end
$var reg 32 P$ r14_svc [31:0] $end
$var reg 32 Q$ r14_mon [31:0] $end
$var reg 32 R$ r14_abt [31:0] $end
$var reg 32 S$ r14_und [31:0] $end
$var reg 32 T$ r_pc [31:0] $end
$var reg 1 U$ clk_reg $end
$var integer 32 V$ i [31:0] $end
$upscope $end
$scope module barrelshifter32_inst $end
$var wire 32 8 Shift_Data [31:0] $end
$var wire 8 9 Shift_Num [7:0] $end
$var wire 1 W$ Carry_flag $end
$var wire 3 0 SHIFT_OP [2:0] $end
$var wire 32 1 Shift_out [31:0] $end
$var reg 1 X$ Shift_carry_out $end
$var reg 64 Y$ temp [63:0] $end
$upscope $end
$scope module ALU_inst $end
$var wire 32 R A [31:0] $end
$var wire 32 S B [31:0] $end
$var wire 4 / ALU_OP [3:0] $end
$var wire 1 : shiftCout $end
$var wire 1 = S $end
$var wire 1 W$ C $end
$var wire 1 Z$ V $end
$var reg 32 [$ F [31:0] $end
$var reg 4 \$ NZCV [3:0] $end
$var reg 1 ]$ Cout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x!
bz !!
z!"
0!#
bx !$
z"
z"!
z""
b0 "#
bx "$
bx #
0#!
bz #"
0##
x#$
x$
b0 $!
bz $"
b0 $#
x$$
x%
b0 %!
bz %"
b0 %#
x%$
x&
b0 &!
bz &"
b0 &#
x&$
bx '
b0 '!
z'"
0'#
bx '$
bx (
b0 (!
z("
0(#
bx ($
bx )
0)!
0)"
b110000 )#
bx )$
bx *
z*!
0*"
b0 *#
bx *$
bx +
bz +!
bz +"
1+#
bx +$
bx ,
bz ,!
bz ,"
1,#
bx ,$
x-
bz -!
b0 -"
0-#
x-$
bx .
z.!
0."
b0 .#
x.$
bx /
z/!
b0 /"
b0 /#
x/$
bx 0
00!
00"
00#
x0$
bx 1
01!
01"
01#
x1$
bx 2
02!
02"
b0 2#
x2$
bx 3
z3!
03"
b0 3#
x3$
bx 4
z4!
04"
04#
x4$
x5
bz 5!
05"
05#
bx 5$
x6
06!
06"
06#
x6$
x7
07!
07"
07#
x7$
bx 8
z8!
08"
b0 8#
x8$
bx 9
z9!
09"
b0 9#
x9$
x:
z:!
0:"
b0 :#
x:$
bx ;
z;!
0;"
b0 ;#
bx ;$
bx <
z<!
0<"
0<#
bx <$
x=
z=!
0="
0=#
bx =$
x>
z>!
0>"
b110000 >#
bx >$
bx ?
z?!
0?"
b0 ?#
b1 ?$
bx @
0@!
0@"
1@#
x@$
bx A
bx A!
0A"
1A#
0A$
xB
b0 B!
0B"
0B#
xB$
bx C
b0 C!
bx C"
b0 C#
b10000 C$
bx D
0D!
b0 D"
b0 D#
bx D$
bx E
b0 E!
0E"
0E#
bx E$
bx F
b0 F!
0F"
0F#
bx F$
xG
b0 G!
b11 G"
b0 G#
xG$
xH
b0 H!
b0 H"
0H#
0H$
xI
b0 I!
b0 I"
0I#
bx I$
xJ
b0 J!
0J"
b0 J#
bx J$
bx K
b0 K!
0K"
b0 K#
bx K$
bx L
b0 L!
0L"
0L#
bx L$
bx M
b0 M!
0M"
0M#
bx M$
b10000 N
b0 N!
b0 N"
b0 N#
bx N$
bz O
0O!
0O"
b1110 O#
bx O$
b0 P
bz P!
0P"
1P#
bx P$
bx Q
bz Q!
b0 Q"
b11100001001011111111111100011110 Q#
bx Q$
bx R
b0 R!
b0 R"
0R#
bx R$
bx S
b0 S!
b0 S"
0S#
bx S$
bx T
b0 T!
b0 T"
b11100001001011111111111100011110 T#
bx T$
bx U
b0 U!
b0 U"
b1110 U#
xU$
xV
b0 V!
xV"
bx V#
bx V$
bx W
bz W!
xW"
bx W#
xW$
0X
bz X!
xX"
xX#
xX$
0Y
bz Y!
xY"
bx Y#
bx Y$
0Z
bz Z!
xZ"
bx Z#
xZ$
0[
0[!
bx ["
bx [#
bx [$
b0 \
0\!
b11111111111111111011000111100000 \"
bx \#
bx \$
0]
0]!
bx ]"
bx ]#
x]$
0^
0^!
b11100001001011111111111100011110 ^"
x^#
0_
0_!
bx _"
bx _#
0`
x`!
b110000 `"
bx `#
0a
0a!
b110000 a"
bx a#
b0 b
0b!
b110000 b"
xb#
b0 c
0c!
b110001001101100011010110101111101101101011001010110110101011111011001110110010101101110010111110011000000101110011011010110100101100110 c"
bx c#
b0 d
0d!
b110001001101100011010110101111101101101011001010110110101011111011001110110010101101110010111110011000000101110011011010110010101101101 d"
bx d#
0e
0e!
b1 e"
b1000000 e#
0f
0f!
b110 f"
bx f#
0g
0g!
b110 g"
b1 g#
0h
0h!
b110 h"
b11111111111111111111111111111111 h#
b0 i
0i!
b110 i"
b0 i#
0j
0j!
1j"
b0 j#
0k
0k!
0k"
b1 k#
0l
0l!
0l"
b0 l#
0m
0m!
0m"
bx m#
0n
0n!
0n"
bx n#
0o
0o!
0o"
bx o#
0p
0p!
1p"
bx p#
0q
0q!
0q"
bx q#
b0 r
0r!
0r"
bx r#
b0 s
0s!
0s"
xs#
b0 t
0t!
bx t"
xt#
b0 u
0u!
xu"
xu#
b0 v
0v!
xv"
bx v#
0w
0w!
bx w"
bx w#
zx
0x!
xx"
bx x#
b0 y
0y!
xy"
bx y#
0z
bx z!
b0 z"
bx z#
0{
b0 {!
b0 {"
bx {#
0|
bz |!
0|"
bx |#
z}
bz }!
0}"
bx }#
bz ~
z~!
0~"
bx ~#
$end
#100
0u"
1v"
b0 w"
0x"
0y"
#1000000
b0 !$
1"
b0 "$
b0 #
0#$
0$
0$$
0%
0%$
0&
0&$
b0 '
b0 '$
b0 (
b0 ($
b0 )
b0 )$
b0 *
b0 *$
b0 +
b0 +$
b0 ,
b1 ,$
0-
0-$
b0 .
0.$
b0 /
0/$
b0 0
00$
b0 1
01$
b0 2
02$
b0 3
03$
b0 4
04$
05
b0 5$
06
06$
07
07$
b0 8
08$
b0 9
09$
0:$
b0 ;
b0 ;$
b1x0 <
b0 <$
0=
b0 =$
0>
b0 >$
b0 ?
b0 @
0@$
b0 A
b0 A!
0B
0B$
b0 C
b0 C"
b0 D
b0 E
b0 F
0G
0H
0I
0J
b0 Q
b0 R
b0 S
b0 T
b0 U
0V
b0 W
0W$
bx00000000000000000000000000000000 Y$
0Z$
b0 [$
b1x0 \$
b0 z!
b0 ~#
#1000100
b0 t"
#11000000
1!
0"
b1 >$
0G$
0W"
0X"
b0 ]#
0^#
b0 _#
1`!
#11000100
b11100011101000000000000000000100 .#
1>
b10 ?$
b11100011101000000000000000000100 C!
b11100011101000000000000000000100 H"
b11100011101000000000000000000100 P
1V
b11100011101000000000000000000100 z"
b11100011101000000000000000000100 {"
#16000000
0!
11$
12$
13$
1G
1H
1I
0`!
#21000000
1!
bx '
bx (
bx )
bx 1
bx 8
bx ;
bx0 <
b10 >$
b11 ?$
bx R
bx S
bx Y$
bx [$
bx0 \$
1`!
#26000000
0!
01$
02$
03$
14$
0G
0H
0I
1J
0`!
#31000000
1!
bx *
bx 2
b11 >$
b100 ?$
1`!
#36000000
0!
1&
10$
04$
0J
0`!
#41000000
1!
b100 >$
b1 ?$
1`!
#46000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#51000000
1!
b1 >$
b10 ?$
bz T$
1`!
#56000000
0!
b111 !$
b1101 "$
b11100011101000000000000000000100 #
0$
1$$
0%
b1101 '$
b1110 ($
b1101 )$
b1 *$
b100 +
b100 ,$
0.$
0/$
11$
12$
13$
b100 @
b101000000000000000000100 A
b1 A!
b1 C"
b100 E
1G
1H
1I
b100 T
b11100011101000000000000000000100 U
b1 W
0`!
b1 z!
b10 ~#
#56000100
b1 t"
#61000000
1!
b10 >$
b11 ?$
b1 ]#
b1 _#
1`!
#61000100
b11100011101000000001000000000001 .#
b11100011101000000001000000000001 C!
b11100011101000000001000000000001 H"
b11100011101000000001000000000001 P
b11100011101000000001000000000001 z"
b11100011101000000001000000000001 {"
#66000000
0!
1-
b10 .
b1101 /
b111 0
b100 1
01$
02$
03$
14$
b100 8
1:$
b100 ;
b10 ;$
b0x0 <
b111 <$
b1101 =$
0G
0H
0I
1J
b100 S
bx00000000000000000000000000000100 Y$
b100 [$
b0x0 \$
0`!
#71000000
1!
b100 *
b100 2
b11 >$
b100 ?$
1`!
#76000000
0!
1&
b0 /
10$
04$
b0x00 ;
b0xx0 <
b0 =$
0J
b0x00 [$
b0xx0 \$
0`!
#81000000
1!
b100 >$
b1 ?$
1`!
#86000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#91000000
1!
b1 >$
b10 ?$
1`!
#96000000
0!
b11100011101000000001000000000001 #
0$
0%
b1000 +
0.$
0/$
b1 1
11$
12$
b1 3
13$
b1 8
b0x ;
b1 @
b101000000001000000000001 A
b10 A!
b1 C
b10 C"
b1 E
1G
1H
1I
b1 S
b1000 T
b11100011101000000001000000000001 U
b10 W
bx00000000000000000000000000000001 Y$
b0x [$
0`!
b10 z!
#96000100
b10 t"
#101000000
1!
b10 >$
b11 ?$
b10 ]#
b10 _#
1`!
#101000100
b11100011101000000010000000000010 .#
b11100011101000000010000000000010 C!
b11100011101000000010000000000010 H"
b11100011101000000010000000000010 P
b11100011101000000010000000000010 z"
b11100011101000000010000000000010 {"
#106000000
0!
b1101 /
01$
02$
03$
14$
b1 ;
b0x0 <
b1101 =$
0G
0H
0I
1J
b1 [$
b0x0 \$
0`!
#111000000
1!
b1 *
b1 2
b11 >$
b100 ?$
1`!
#116000000
0!
1&
b0 /
10$
04$
b0x ;
b0xx0 <
b0 =$
0J
b0x [$
b0xx0 \$
0`!
#121000000
1!
b100 >$
b1 ?$
1`!
#126000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#131000000
1!
b1 >$
b10 ?$
1`!
#136000000
0!
b11100011101000000010000000000010 #
0$
0%
b1100 +
0.$
0/$
b10 1
11$
12$
b10 3
13$
b10 8
b0x0 ;
b10 @
b101000000010000000000010 A
b11 A!
b10 C
b11 C"
b10 E
1G
1H
1I
b10 S
b1100 T
b11100011101000000010000000000010 U
b11 W
bx00000000000000000000000000000010 Y$
b0x0 [$
0`!
b11 z!
#136000100
b11 t"
#141000000
1!
b10 >$
b11 ?$
b11 ]#
b11 _#
1`!
#141000100
b11100011101000000011000000001010 .#
b11100011101000000011000000001010 C!
b11100011101000000011000000001010 H"
b11100011101000000011000000001010 P
b11100011101000000011000000001010 z"
b11100011101000000011000000001010 {"
#146000000
0!
b1101 /
01$
02$
03$
14$
b10 ;
b0x0 <
b1101 =$
0G
0H
0I
1J
b10 [$
b0x0 \$
0`!
#151000000
1!
b10 *
b10 2
b11 >$
b100 ?$
1`!
#156000000
0!
1&
b0 /
10$
04$
b0x0 ;
b0xx0 <
b0 =$
0J
b0x0 [$
b0xx0 \$
0`!
#161000000
1!
b100 >$
b1 ?$
1`!
#166000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#171000000
1!
b1 >$
b10 ?$
1`!
#176000000
0!
b11100011101000000011000000001010 #
0$
0%
b10000 +
0.$
0/$
b1010 1
11$
12$
b11 3
13$
b1010 8
b0x0x0 ;
b1010 @
b101000000011000000001010 A
b100 A!
b11 C
b100 C"
b1010 E
1G
1H
1I
b1010 S
b10000 T
b11100011101000000011000000001010 U
b100 W
bx00000000000000000000000000001010 Y$
b0x0x0 [$
0`!
b100 z!
#176000100
b100 t"
#181000000
1!
b10 >$
b11 ?$
b100 ]#
b100 _#
1`!
#181000100
b11100011101000000100000000000000 .#
b11100011101000000100000000000000 C!
b11100011101000000100000000000000 H"
b11100011101000000100000000000000 P
b11100011101000000100000000000000 z"
b11100011101000000100000000000000 {"
#186000000
0!
b1101 /
01$
02$
03$
14$
b1010 ;
b0x0 <
b1101 =$
0G
0H
0I
1J
b1010 [$
b0x0 \$
0`!
#191000000
1!
b1010 *
b1010 2
b11 >$
b100 ?$
1`!
#196000000
0!
1&
b0 /
10$
04$
b0x0x0 ;
b0xx0 <
b0 =$
0J
b0x0x0 [$
b0xx0 \$
0`!
#201000000
1!
b100 >$
b1 ?$
1`!
#206000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#211000000
1!
b1 >$
b10 ?$
1`!
#216000000
0!
b11100011101000000100000000000000 #
0$
0%
b10100 +
0.$
0/$
b0 1
11$
12$
b100 3
13$
b0 8
b0 ;
b1x0 <
b0 @
b101000000100000000000000 A
b101 A!
b100 C
b101 C"
b0 E
b100 E$
1G
1H
1I
b100 L
b0 S
b10100 T
b11100011101000000100000000000000 U
b101 W
bx00000000000000000000000000000000 Y$
b0 [$
b1x0 \$
0`!
b101 z!
#216000100
b101 t"
#221000000
1!
b100 (
b10 >$
b11 ?$
b101 ]#
b101 _#
1`!
#221000100
b11100000010100110011000100010010 .#
b11100000010100110011000100010010 C!
b11100000010100110011000100010010 H"
b11100000010100110011000100010010 P
b11100000010100110011000100010010 z"
b11100000010100110011000100010010 {"
#226000000
0!
b1101 /
01$
02$
03$
14$
b1101 =$
0G
0H
0I
1J
0`!
#231000000
1!
b0 *
b0 2
b11 >$
b100 ?$
1`!
#236000000
0!
1&
b0 /
10$
04$
b0 =$
0J
0`!
#241000000
1!
b100 >$
b1 ?$
1`!
#246000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#251000000
1!
b1 >$
b10 ?$
1`!
#256000000
0!
b1 !$
b10 "$
b11100000010100110011000100010010 #
1#$
0$
0$$
0%
b10 '$
b10 )$
b0 *$
b11000 +
b10 ,$
0.$
0/$
b100000000000000000000000000001 1
11$
12$
b11 3
13$
b10010 8
b100 9
0:
b0x0000000000000000000000000000x ;
b0x00 <
b10 ?
b100010010 @
b10100110011000100010010 A
b110 A!
b11 C
b110 C"
b11 D
b1010 D$
b10 E
b10 E$
b1 F
b1 F$
1G
1H
1I
b1010 K
b10 L
b1 M
b10 Q
b100000000000000000000000000001 S
b11000 T
b11100000010100110011000100010010 U
b110 W
0X$
b100100000000000000000000000000001 Y$
b0x0000000000000000000000000000x [$
b0x00 \$
0`!
b110 z!
b1 ~#
#256000100
b110 t"
#261000000
1!
b1010 '
b10 (
b1 )
b0 ;
b100 <
b10 >$
b11 ?$
b1010 R
b0 [$
b100 \$
b110 ]#
b110 _#
1`!
#261000100
b101010111111111111111111111110 .#
0>
b101010111111111111111111111110 C!
b101010111111111111111111111110 H"
b101010111111111111111111111110 P
0V
b101010111111111111111111111110 z"
b101010111111111111111111111110 {"
#266000000
0!
0-
b1 .
b10 /
b1 0
b100 1
01$
02$
03$
14$
b10 8
b1 9
19$
0:$
b110 ;
b1 ;$
b0 <
b1 <$
1=
b10 =$
0G
0H
0I
1J
b1 Q
b100 S
b100000000000000000000000000000100 Y$
b110 [$
b0 \$
0]$
0`!
#271000000
1!
b110 *
b110 2
b11 >$
b100 ?$
1`!
#276000000
0!
1&
b0 /
10$
04$
09$
b0 ;
b100 <
0=
b0 =$
0J
b0 [$
b100 \$
0`!
#281000000
1!
b100 >$
b1 ?$
1`!
#286000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#291000000
1!
b1 >$
1`!
#296000000
0!
b11100 +
1.$
1/$
b111 A!
b111 C"
b11100 T
b111 W
0`!
b111 z!
#296000100
b111 t"
#301000000
1!
b111 ]#
b111 _#
1`!
#301000100
b111011000000000000000000000100 .#
1>
b1011 ?$
1A$
b111011000000000000000000000100 C!
b111011000000000000000000000100 H"
b111011000000000000000000000100 P
1V
b111011000000000000000000000100 z"
b111011000000000000000000000100 {"
#306000000
0!
b0 !$
b0 "$
b111011000000000000000000000100 #
0#$
0$
0%
1%$
1&$
b0 '$
b11 ($
b1000 )$
b101 *$
b100000 +
b0 ,$
0.$
b1000 /
0/$
b0 3
14$
16
16$
b100000 ;
b0 <
b1000 =$
b0 ?
b100 @
b100 A
b1000 A!
1B
b0 C
b1000 C"
b0 D
b100 D$
b100 E
b0 E$
b0 F
b100 F$
1J
b100 K
b0 L
b100 M
b100000 R
b100000 T
b111011000000000000000000000100 U
b1000 W
b100000 [$
b0 \$
0`!
b1000 z!
b0 ~#
#306000100
b1000 t"
#311000000
1!
b100000 *
b100000 2
b1011 >$
b1100 ?$
b1000 ]#
b1000 _#
1`!
#311000100
b11100001001011111111111100010000 .#
0A$
b11100001001011111111111100010000 C!
b11100001001011111111111100010000 H"
b11100001001011111111111100010000 P
b11100001001011111111111100010000 z"
b11100001001011111111111100010000 {"
#316000000
0!
1&
b100 /
10$
b1110 3
14$
15
17
17$
18$
b110000 ;
b100 =$
b10000 S
b110000 [$
0`!
#321000000
1!
b110000 *
b110000 2
b1100 >$
b1010 ?$
1`!
#326000000
0!
1$
0&
1.$
b0 /
00$
b0 3
b10 4
04$
05
b10 5$
06
06$
07
07$
08$
b0 ;
b100 <
b0 =$
0J
b1010 R
b100 S
b0 [$
b100 \$
0`!
#331000000
1!
b1010 >$
b1 ?$
1`!
#336000000
0!
1%
b110000 +
1.$
1/$
b0 4
b0 5$
b1100 A!
b1100 C"
b110000 T
b1100 W
0`!
b1100 z!
#336000100
b1100 t"
#341000000
1!
b1 >$
b10 ?$
b1100 ]#
b1100 _#
1`!
#341000100
b11100011101000000111000000100011 .#
b11100011101000000111000000100011 C!
b11100011101000000111000000100011 H"
b11100011101000000111000000100011 P
b11100011101000000111000000100011 z"
b11100011101000000111000000100011 {"
#346000000
0!
b111 !$
b1101 "$
b11100011101000000111000000100011 #
0$
1$$
0%
0%$
0&$
b1101 '$
b1110 ($
b1101 )$
b1 *$
b110100 +
b1 +$
b100 ,$
0.$
0/$
11$
12$
b111 3
13$
b100011 @
b101000000111000000100011 A
b1101 A!
0B
b111 C
b1101 C"
b11 E
b110 E$
1G
1H
1I
b110 L
b110100 T
b11100011101000000111000000100011 U
b1101 W
0`!
b1101 z!
b10 ~#
#346000100
b1101 t"
#351000000
1!
b100 '
b110 (
b100 )
b1100000 1
b110 8
b100 9
b0 ;
b100 <
b10 >$
b11 ?$
b100 Q
b100 R
b1100000 S
b100000000000000000000000001100000 Y$
b0 [$
b100 \$
b1101 ]#
b1101 _#
1`!
#351000100
b11100010100001000100000000000001 .#
b11100010100001000100000000000001 C!
b11100010100001000100000000000001 H"
b11100010100001000100000000000001 P
b11100010100001000100000000000001 z"
b11100010100001000100000000000001 {"
#356000000
0!
1-
b10 .
b1101 /
b111 0
b100011 1
01$
02$
03$
14$
b100011 8
b0 9
1:$
b100011 ;
b10 ;$
b0 <
b111 <$
b1101 =$
0G
0H
0I
1J
b0 Q
b100011 S
b100000000000000000000000000100011 Y$
b100011 [$
b0 \$
0`!
#361000000
1!
b100011 *
b100011 2
b11 >$
b100 ?$
1`!
#366000000
0!
1&
b0 /
10$
04$
b0 ;
b100 <
b0 =$
0J
b0 [$
b100 \$
0`!
#371000000
1!
b100 >$
b1 ?$
1`!
#376000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#381000000
1!
b1 >$
b10 ?$
1`!
#386000000
0!
b100 "$
b11100010100001000100000000000001 #
0$
0%
b100 '$
b100 )$
b111000 +
b0 +$
0.$
0/$
b1 1
11$
12$
b100 3
13$
b1 8
b1 @
b100001000100000000000001 A
b1110 A!
b100 C
b1110 C"
b100 D
b0 D$
b1 E
b1 E$
1G
1H
1I
b0 K
b1 L
b1 S
b111000 T
b11100010100001000100000000000001 U
b1110 W
b100000000000000000000000000000001 Y$
0`!
b1110 z!
#386000100
b1110 t"
#391000000
1!
b0 '
b1 (
b10 >$
b11 ?$
b0 R
b1110 ]#
b1110 _#
1`!
#391000100
b11100001001011111111111100011110 .#
b11100001001011111111111100011110 C!
b11100001001011111111111100011110 H"
b11100001001011111111111100011110 P
b11100001001011111111111100011110 z"
b11100001001011111111111100011110 {"
#396000000
0!
b100 /
01$
02$
03$
14$
b1 ;
b0 <
b100 =$
0G
0H
0I
1J
b1 [$
b0 \$
0`!
#401000000
1!
b1 *
b1 2
b11 >$
b100 ?$
1`!
#406000000
0!
1&
b0 /
10$
04$
b0 ;
b100 <
b0 =$
0J
b0 [$
b100 \$
0`!
#411000000
1!
b100 >$
b1 ?$
1`!
#416000000
0!
1$
1%
0&
1.$
1/$
00$
0`!
#421000000
1!
b1 >$
b10 ?$
1`!
#426000000
0!
b0 !$
b1 "$
b11100001001011111111111100011110 #
0$
0$$
0%
1%$
1&$
b1 '$
b1001 )$
b0 *$
b111100 +
b0 ,$
1-$
0.$
0/$
b111100000 1
11$
12$
b1111 3
13$
b11110 8
b11100 9
b11110 ?
b111100011110 @
b1011111111111100011110 A
b1111 A!
1B
1B$
b1111 C
b1111 C"
b1111 D
bz D$
b1110 E
b100000 E$
b1111 F
bz F$
1G
1H
1I
bz K
b100000 L
bz M
b11110 Q
b111100000 S
b111100 T
b11100001001011111111111100011110 U
b1111 W
b111100000 Y$
0`!
b1111 z!
b0 ~#
#426000100
b1111 t"
#431000000
1!
bz '
b100000 (
bz )
b0xxxx00000 ;
b0x00 <
b10 >$
b1000 ?$
bz R
b0xxxx00000 [$
b0x00 \$
b1111 ]#
b1111 _#
1`!
#431000100
b0 .#
0>
b0 C!
b0 H"
b0 P
0V
b0 z"
b0 {"
#436000000
0!
1$
1.$
01$
02$
03$
b1 4
b1 5$
0G
0H
0I
0`!
#441000000
1!
b1000 >$
b1 ?$
1`!
#446000000
0!
1%
b100000 +
1.$
1/$
b0 4
b0 5$
b1000 A!
b1000 C"
b100000 T
b1000 W
0`!
b1000 z!
#446000100
b1000 t"
#451000000
1!
b1 >$
b1000 ]#
b1000 _#
1`!
#451000100
b11100001001011111111111100010000 .#
1>
b10 ?$
b11100001001011111111111100010000 C!
b11100001001011111111111100010000 H"
b11100001001011111111111100010000 P
1V
b11100001001011111111111100010000 z"
b11100001001011111111111100010000 {"
#456000000
0!
b11100001001011111111111100010000 #
0$
0%
b100100 +
0.$
0/$
b100000000 1
11$
12$
13$
b10000 8
b0x00000000 ;
b111100010000 @
b1011111111111100010000 A
b1001 A!
b1001 C"
b0 E
b100 E$
1G
1H
1I
b100 L
b100000000 S
b100100 T
b11100001001011111111111100010000 U
b1001 W
b100000000 Y$
b0x00000000 [$
0`!
b1001 z!
#456000100
b1001 t"
#461000000
1!
b100 (
b10 >$
b1000 ?$
b1001 ]#
b1001 _#
1`!
#461000100
b0 .#
0>
b0 C!
b0 H"
b0 P
0V
b0 z"
b0 {"
#466000000
0!
1$
1.$
01$
02$
03$
b1 4
b1 5$
0G
0H
0I
0`!
#471000000
1!
b1000 >$
b1 ?$
1`!
#476000000
0!
1%
b100 +
1.$
1/$
b0 4
b0 5$
b1 A!
b1 C"
b100 T
b1 W
0`!
b1 z!
#476000100
b1 t"
#481000000
1!
b1 >$
b1 ]#
b1 _#
1`!
#481000100
b11100011101000000001000000000001 .#
1>
b10 ?$
b11100011101000000001000000000001 C!
b11100011101000000001000000000001 H"
b11100011101000000001000000000001 P
1V
b11100011101000000001000000000001 z"
b11100011101000000001000000000001 {"
#486000000
0!
b111 !$
b1101 "$
b11100011101000000001000000000001 #
0$
1$$
0%
0%$
0&$
b1101 '$
b1101 )$
b1 *$
b1000 +
b100 ,$
0-$
0.$
0/$
b1 1
11$
12$
b1 3
13$
b1 8
b0 9
b0x ;
b0 ?
b1 @
b101000000001000000000001 A
b10 A!
0B
0B$
b1 C
b10 C"
b0 D
b100 D$
b1 E
b1 E$
b0 F
b100 F$
1G
1H
1I
b100 K
b1 L
b100 M
b0 Q
b1 S
b1000 T
b11100011101000000001000000000001 U
b10 W
b1 Y$
b0x [$
0`!
b10 z!
b10 ~#
#486000100
b10 t"
#491000000
1!
b100 '
b1 (
b100 )
b0 ;
b100 <
b10 >$
b11 ?$
b100 R
b0 [$
b100 \$
b10 ]#
b10 _#
1`!
#491000100
b11100011101000000010000000000010 .#
b11100011101000000010000000000010 C!
b11100011101000000010000000000010 H"
b11100011101000000010000000000010 P
b11100011101000000010000000000010 z"
b11100011101000000010000000000010 {"
#496000000
0!
b1101 /
01$
02$
03$
14$
b1 ;
b0 <
b1101 =$
0G
0H
0I
1J
b1 [$
b0 \$
0`!
#501000000
1!
b11 >$
b100 ?$
1`!
